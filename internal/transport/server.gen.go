// Package transport provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Date defines model for Date.
type Date = string

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Price defines model for Price.
type Price = int

// ServiceName defines model for ServiceName.
type ServiceName = string

// Subscription defines model for Subscription.
type Subscription struct {
	EndDate        *Date       `json:"end_date,omitempty"`
	Price          Price       `json:"price"`
	ServiceName    ServiceName `json:"service_name"`
	StartDate      Date        `json:"start_date"`
	SubscriptionId *UUID       `json:"subscription_id,omitempty"`
	UserId         UUID        `json:"user_id"`
}

// SubscriptionCreate defines model for SubscriptionCreate.
type SubscriptionCreate struct {
	EndDate     *Date       `json:"end_date,omitempty"`
	Price       Price       `json:"price"`
	ServiceName ServiceName `json:"service_name"`
	StartDate   Date        `json:"start_date"`
	UserId      UUID        `json:"user_id"`
}

// SubscriptionPatch defines model for SubscriptionPatch.
type SubscriptionPatch struct {
	EndDate     *Date        `json:"end_date,omitempty"`
	Price       *Price       `json:"price,omitempty"`
	ServiceName *ServiceName `json:"service_name,omitempty"`
	StartDate   *Date        `json:"start_date,omitempty"`
	UserId      *UUID        `json:"user_id,omitempty"`
}

// Subscriptions defines model for Subscriptions.
type Subscriptions = []Subscription

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// StatsSubscriptionsParams defines parameters for StatsSubscriptions.
type StatsSubscriptionsParams struct {
	// StartDate Дата начала интервала
	StartDate *Date `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Дата окончания интервала
	EndDate *Date `form:"end_date,omitempty" json:"end_date,omitempty"`

	// UserId Фильтр по id пользователя
	UserId *UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// ServiceName Фильтр по названию подписки
	ServiceName *ServiceName `form:"service_name,omitempty" json:"service_name,omitempty"`
}

// ListSubscriptionsParams defines parameters for ListSubscriptions.
type ListSubscriptionsParams struct {
	// Offset Смещение от начала списка
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество получаемых элементов
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// StartDate Дата начала интервала
	StartDate *Date `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Дата окончания интервала
	EndDate *Date `form:"end_date,omitempty" json:"end_date,omitempty"`

	// UserId Фильтр по id пользователя
	UserId *UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// ServiceName Фильтр по названию подписки
	ServiceName *ServiceName `form:"service_name,omitempty" json:"service_name,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// UpdateSubscriptionJSONRequestBody defines body for UpdateSubscription for application/json ContentType.
type UpdateSubscriptionJSONRequestBody = SubscriptionPatch

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Статистика по всем подпискам за период (суммарная стоимость)
	// (GET /stats)
	StatsSubscriptions(c *fiber.Ctx, params StatsSubscriptionsParams) error
	// Получение списка подписок
	// (GET /subscriptions)
	ListSubscriptions(c *fiber.Ctx, params ListSubscriptionsParams) error
	// Создание подписки
	// (POST /subscriptions)
	CreateSubscription(c *fiber.Ctx) error
	// Удаление подписки по идентификатору
	// (DELETE /subscriptions/{subscription_id})
	DeleteSubscription(c *fiber.Ctx, subscriptionId UUID) error
	// Получить подписку по идентификатору
	// (GET /subscriptions/{subscription_id})
	ReadSubscription(c *fiber.Ctx, subscriptionId UUID) error
	// Изменение подписки
	// (PATCH /subscriptions/{subscription_id})
	UpdateSubscription(c *fiber.Ctx, subscriptionId UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// StatsSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) StatsSubscriptions(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StatsSubscriptionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter start_date: %w", err).Error())
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter end_date: %w", err).Error())
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", query, &params.UserId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	// ------------- Optional query parameter "service_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_name", query, &params.ServiceName)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter service_name: %w", err).Error())
	}

	return siw.Handler.StatsSubscriptions(c, params)
}

// ListSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListSubscriptions(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubscriptionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter start_date: %w", err).Error())
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter end_date: %w", err).Error())
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", query, &params.UserId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	// ------------- Optional query parameter "service_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_name", query, &params.ServiceName)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter service_name: %w", err).Error())
	}

	return siw.Handler.ListSubscriptions(c, params)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(c *fiber.Ctx) error {

	return siw.Handler.CreateSubscription(c)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "subscription_id" -------------
	var subscriptionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "subscription_id", c.Params("subscription_id"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter subscription_id: %w", err).Error())
	}

	return siw.Handler.DeleteSubscription(c, subscriptionId)
}

// ReadSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReadSubscription(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "subscription_id" -------------
	var subscriptionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "subscription_id", c.Params("subscription_id"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter subscription_id: %w", err).Error())
	}

	return siw.Handler.ReadSubscription(c, subscriptionId)
}

// UpdateSubscription operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubscription(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "subscription_id" -------------
	var subscriptionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "subscription_id", c.Params("subscription_id"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter subscription_id: %w", err).Error())
	}

	return siw.Handler.UpdateSubscription(c, subscriptionId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/stats", wrapper.StatsSubscriptions)

	router.Get(options.BaseURL+"/subscriptions", wrapper.ListSubscriptions)

	router.Post(options.BaseURL+"/subscriptions", wrapper.CreateSubscription)

	router.Delete(options.BaseURL+"/subscriptions/:subscription_id", wrapper.DeleteSubscription)

	router.Get(options.BaseURL+"/subscriptions/:subscription_id", wrapper.ReadSubscription)

	router.Patch(options.BaseURL+"/subscriptions/:subscription_id", wrapper.UpdateSubscription)

}

type StatsSubscriptionsRequestObject struct {
	Params StatsSubscriptionsParams
}

type StatsSubscriptionsResponseObject interface {
	VisitStatsSubscriptionsResponse(ctx *fiber.Ctx) error
}

type StatsSubscriptions200JSONResponse struct {
	TotalPrice *int `json:"total_price,omitempty"`
}

func (response StatsSubscriptions200JSONResponse) VisitStatsSubscriptionsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type StatsSubscriptionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response StatsSubscriptionsdefaultJSONResponse) VisitStatsSubscriptionsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type ListSubscriptionsRequestObject struct {
	Params ListSubscriptionsParams
}

type ListSubscriptionsResponseObject interface {
	VisitListSubscriptionsResponse(ctx *fiber.Ctx) error
}

type ListSubscriptions200JSONResponse Subscriptions

func (response ListSubscriptions200JSONResponse) VisitListSubscriptionsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListSubscriptionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListSubscriptionsdefaultJSONResponse) VisitListSubscriptionsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(ctx *fiber.Ctx) error
}

type CreateSubscription200JSONResponse struct {
	SubscriptionId *UUID `json:"subscription_id,omitempty"`
}

func (response CreateSubscription200JSONResponse) VisitCreateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateSubscription422JSONResponse Error

func (response CreateSubscription422JSONResponse) VisitCreateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type CreateSubscriptiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSubscriptiondefaultJSONResponse) VisitCreateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId UUID `json:"subscription_id"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(ctx *fiber.Ctx) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteSubscription404Response struct {
}

func (response DeleteSubscription404Response) VisitDeleteSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type DeleteSubscriptiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteSubscriptiondefaultJSONResponse) VisitDeleteSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type ReadSubscriptionRequestObject struct {
	SubscriptionId UUID `json:"subscription_id"`
}

type ReadSubscriptionResponseObject interface {
	VisitReadSubscriptionResponse(ctx *fiber.Ctx) error
}

type ReadSubscription200JSONResponse Subscription

func (response ReadSubscription200JSONResponse) VisitReadSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ReadSubscription404Response struct {
}

func (response ReadSubscription404Response) VisitReadSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type ReadSubscriptiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ReadSubscriptiondefaultJSONResponse) VisitReadSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UpdateSubscriptionRequestObject struct {
	SubscriptionId UUID `json:"subscription_id"`
	Body           *UpdateSubscriptionJSONRequestBody
}

type UpdateSubscriptionResponseObject interface {
	VisitUpdateSubscriptionResponse(ctx *fiber.Ctx) error
}

type UpdateSubscription204Response struct {
}

func (response UpdateSubscription204Response) VisitUpdateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type UpdateSubscription404Response struct {
}

func (response UpdateSubscription404Response) VisitUpdateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type UpdateSubscription422JSONResponse Error

func (response UpdateSubscription422JSONResponse) VisitUpdateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type UpdateSubscriptiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSubscriptiondefaultJSONResponse) VisitUpdateSubscriptionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Статистика по всем подпискам за период (суммарная стоимость)
	// (GET /stats)
	StatsSubscriptions(ctx context.Context, request StatsSubscriptionsRequestObject) (StatsSubscriptionsResponseObject, error)
	// Получение списка подписок
	// (GET /subscriptions)
	ListSubscriptions(ctx context.Context, request ListSubscriptionsRequestObject) (ListSubscriptionsResponseObject, error)
	// Создание подписки
	// (POST /subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Удаление подписки по идентификатору
	// (DELETE /subscriptions/{subscription_id})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Получить подписку по идентификатору
	// (GET /subscriptions/{subscription_id})
	ReadSubscription(ctx context.Context, request ReadSubscriptionRequestObject) (ReadSubscriptionResponseObject, error)
	// Изменение подписки
	// (PATCH /subscriptions/{subscription_id})
	UpdateSubscription(ctx context.Context, request UpdateSubscriptionRequestObject) (UpdateSubscriptionResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// StatsSubscriptions operation middleware
func (sh *strictHandler) StatsSubscriptions(ctx *fiber.Ctx, params StatsSubscriptionsParams) error {
	var request StatsSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.StatsSubscriptions(ctx.UserContext(), request.(StatsSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatsSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(StatsSubscriptionsResponseObject); ok {
		if err := validResponse.VisitStatsSubscriptionsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListSubscriptions operation middleware
func (sh *strictHandler) ListSubscriptions(ctx *fiber.Ctx, params ListSubscriptionsParams) error {
	var request ListSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListSubscriptions(ctx.UserContext(), request.(ListSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListSubscriptionsResponseObject); ok {
		if err := validResponse.VisitListSubscriptionsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(ctx *fiber.Ctx) error {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx.UserContext(), request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(ctx *fiber.Ctx, subscriptionId UUID) error {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx.UserContext(), request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ReadSubscription operation middleware
func (sh *strictHandler) ReadSubscription(ctx *fiber.Ctx, subscriptionId UUID) error {
	var request ReadSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ReadSubscription(ctx.UserContext(), request.(ReadSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ReadSubscriptionResponseObject); ok {
		if err := validResponse.VisitReadSubscriptionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSubscription operation middleware
func (sh *strictHandler) UpdateSubscription(ctx *fiber.Ctx, subscriptionId UUID) error {
	var request UpdateSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	var body UpdateSubscriptionJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSubscription(ctx.UserContext(), request.(UpdateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateSubscriptionResponseObject); ok {
		if err := validResponse.VisitUpdateSubscriptionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
